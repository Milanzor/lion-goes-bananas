{"version":3,"sources":["webpack://lion-goes-bananas/./game/assets/logo.png","webpack://lion-goes-bananas/./game/assets/sunburst.png","webpack://lion-goes-bananas/./game/assets/audio/jungle-drum-music.mp3","webpack://lion-goes-bananas/./game/Scenes/LaunchScene.js","webpack://lion-goes-bananas/./game/assets/lion.png","webpack://lion-goes-bananas/./game/assets/banana.png","webpack://lion-goes-bananas/./game/assets/bg.jpg","webpack://lion-goes-bananas/./game/assets/meat.png","webpack://lion-goes-bananas/./game/assets/lion_ate_meat.png","webpack://lion-goes-bananas/./game/assets/cloud.png","webpack://lion-goes-bananas/./game/assets/monkey.png","webpack://lion-goes-bananas/./game/Objects/Player.js","webpack://lion-goes-bananas/./game/Objects/Banana.js","webpack://lion-goes-bananas/./game/Objects/Cloud.js","webpack://lion-goes-bananas/./game/assets/audio/pop.mp3","webpack://lion-goes-bananas/./game/assets/audio/jump.mp3","webpack://lion-goes-bananas/./game/assets/audio/roar.mp3","webpack://lion-goes-bananas/./game/assets/audio/monkey-laugh.mp3","webpack://lion-goes-bananas/./game/assets/audio/monkey-chest.mp3","webpack://lion-goes-bananas/./game/Scenes/MainScene.js","webpack://lion-goes-bananas/./game/Objects/Monkey.js","webpack://lion-goes-bananas/./game/Objects/Meat.js","webpack://lion-goes-bananas/./game/assets/audio/gameover.mp3","webpack://lion-goes-bananas/./game/Scenes/ScoreScene.js","webpack://lion-goes-bananas/./game/index.js"],"names":["LaunchScene","constructor","super","preload","this","load","image","logo","sunburst","audio","create","bgGradient","add","graphics","fillGradientStyle","fillRect","sys","canvas","width","height","sunburstImage","displayWidth","displayHeight","setScale","tweens","targets","ease","duration","repeat","rotation","yoyo","_logo","_spaceToStartText","input","keyboard","on","scene","start","spaceToStartText","text","fontSize","fontFamily","fontStyle","fill","setPosition","setOrigin","setShadow","setResolution","setAlpha","delay","alpha","logoImage","repeatDelay","scale","y","Player","_playerSprite","physics","sprite","game","lion","setBounce","setCollideWorldBounds","isOnWorldBounds","_meatTimeout","homeostasis","_ateMeat","setGravityY","setSpeedWalk","setTexture","moveLeft","setVelocityX","movementSpeed","setFlipX","moveRight","stationary","jump","setVelocityY","jumpSpeed","play","isNotJumpingOrFalling","body","velocity","getSprite","setSpeedSprint","powerUpMeat","roar","clearTimeout","setTimeout","isPoweredUpByMeat","big","x","rngBool","randomX","bananaSprite","banana","_isBig","cloudSprite","cloud","flip","setAllowGravity","MainScene","bg","meat","monkey","pop","sound","stopAll","_setupClouds","world","setFPS","scoreText","score","player","cursors","createCursorKeys","bananas","group","meats","collider","bananaHit","_monkeySprite","show","monkeyChest","time","addEvent","callback","_spawnBanana","callbackScope","_spawnMeat","_showMonkey","loop","volume","jungleDrumMusic","_isMobile","_deviceBeta","window","DeviceOrientationEvent","addEventListener","event","beta","center","Cloud","setText","Banana","_spawnBigBanana","meatSprite","update","delta","shift","isDown","left","right","up","destroy","ScoreScene","gameover","init","data","continueText","gameoverSound","monkeyLaughSound","config","type","default","arcade","gravity","parent","mode","autoCenter"],"mappings":"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","file":"index.js","sourcesContent":["export default \"/logo.png\";","export default \"/sunburst.png\";","export default \"/jungle-drum-music.mp3\";","import Phaser from 'phaser';\n\nimport logo from '../assets/logo.png';\nimport sunburst from '../assets/sunburst.png';\n// Music\nimport jungleDrumMusic from '../assets/audio/jungle-drum-music.mp3';\n\nexport default class LaunchScene extends Phaser.Scene {\n\n    constructor() {\n        super('launch');\n    }\n\n    preload() {\n\n        this.load.image(logo, logo);\n        this.load.image(sunburst, sunburst);\n        this.load.audio(jungleDrumMusic, jungleDrumMusic);\n    }\n\n    create() {\n\n        // this.sound.add(jungleDrumMusic, {loop: true}).play();\n\n        let bgGradient = this.add.graphics();\n\n        bgGradient.fillGradientStyle(0x009e2e, 0x005619, 0x005619, 0x009e2e, 1);\n        bgGradient.fillRect(0, 0, this.sys.canvas.width, this.sys.canvas.height);\n\n        let sunburstImage = this.add.image(this.sys.canvas.width / 2, (this.sys.canvas.height / 2), sunburst);\n        sunburstImage.displayWidth = this.sys.canvas.width;\n        sunburstImage.displayHeight = this.sys.canvas.height;\n        sunburstImage.setScale(5);\n\n        this.tweens.add({\n            targets: sunburstImage,\n            ease: 'Quad.easeInOut',\n            duration: 5600,\n            repeat: -1,\n            rotation: 3,\n            yoyo: true\n        });\n\n        this._logo();\n        this._spaceToStartText();\n\n        this.input.keyboard.on('keydown-SPACE', function() {\n            this.scene.start('main');\n        }, this);\n        \n        this.input.on('pointerup', function() {\n            this.scene.start('main');\n        }, this);\n\n    }\n\n    _spaceToStartText() {\n\n        let spaceToStartText = this.add.text(0, 0, `Press Space to start`, {fontSize: '42px', fontFamily: 'Arial', fontStyle: 'bold', fill: 'white'});\n\n        spaceToStartText.setPosition(this.sys.canvas.width / 2, (this.sys.canvas.height / 2) + 350);\n        spaceToStartText.setOrigin(0.5);\n\n        spaceToStartText.setShadow(7, 7, 'rgba(0,0,0,1)', 2);\n        spaceToStartText.setResolution(2);\n        spaceToStartText.setAlpha(0);\n\n        this.tweens.add({\n            targets: spaceToStartText,\n            ease: 'Quad.easeInOut',\n            duration: 1000,\n            delay: 2000,\n            alpha: .8,\n            repeat: -1,\n            yoyo: true\n        });\n\n    }\n\n    _logo() {\n\n        let logoImage = this.add.image(this.sys.canvas.width / 2, -500, logo);\n        logoImage.setScale(1);\n        logoImage.setOrigin(0.5);\n\n        this.tweens.add({\n            targets: logoImage,\n            ease: 'Quad.easeInOut',\n            duration: 500,\n            repeat: -1,\n            repeatDelay: 2000,\n            delay: 2700,\n            scale: '+=0.1',\n            rotation: -0.05,\n            yoyo: true\n        });\n        this.tweens.add({\n            targets: logoImage,\n            ease: 'Quad.easeInOut',\n            duration: 500,\n            repeat: 0,\n            delay: 500,\n            y: (this.sys.canvas.height / 2) + 170\n        });\n\n        this.tweens.add({\n            targets: logoImage,\n            ease: 'Quad.easeInOut',\n            duration: 500,\n            repeat: 0,\n            delay: 1000,\n            y: '-=100'\n        });\n\n    }\n\n}\n","export default \"/lion.png\";","export default \"/banana.png\";","export default \"/bg.jpg\";","export default \"/meat.png\";","export default \"/lion_ate_meat.png\";","export default \"/cloud.png\";","export default \"/monkey.png\";","import lion from '../assets/lion.png';\nimport lionAteMeat from '../assets/lion_ate_meat.png';\n\nexport default class Player {\n\n    constructor(scene) {\n\n        this.scene = scene;\n\n        this._playerSprite = this.scene.physics.add.sprite(scene.sys.game.canvas.width / 2, scene.sys.game.canvas.height, lion);\n\n        this._playerSprite.setBounce(0);\n        this._playerSprite.setCollideWorldBounds(true);\n        this._playerSprite.isOnWorldBounds = true;\n\n        this._meatTimeout = null;\n\n        this.homeostasis();\n\n        return this;\n    }\n\n    homeostasis() {\n\n        this._ateMeat = false;\n        this._playerSprite.setGravityY(5000);\n\n        this.setSpeedWalk();\n\n        this._playerSprite.setScale(1);\n        this._playerSprite.setTexture(lion);\n\n    }\n\n    moveLeft() {\n        this._playerSprite.setVelocityX(this.movementSpeed * -1);\n        this._playerSprite.setFlipX(false);\n    }\n\n    moveRight() {\n        this._playerSprite.setVelocityX(this.movementSpeed);\n        this._playerSprite.setFlipX(true);\n    }\n\n    stationary() {\n        this._playerSprite.setVelocityX(0);\n    }\n\n    jump() {\n        this._playerSprite.setVelocityY(this.jumpSpeed * -1);\n        this.scene.jump.play();\n    }\n\n    isNotJumpingOrFalling() {\n        return this._playerSprite.body.velocity.y === 0;\n    }\n\n    getSprite() {\n        return this._playerSprite;\n    }\n\n    setSpeedWalk() {\n        this.movementSpeed = 1000;\n        this.jumpSpeed = 2000;\n    }\n\n    setSpeedSprint() {\n        this.movementSpeed = 1500;\n        this.jumpSpeed = 3000;\n    }\n\n    powerUpMeat() {\n\n        this._ateMeat = true;\n        this.scene.roar.play();\n\n        this.movementSpeed = 2000;\n\n        this._playerSprite.setScale(1.5);\n\n        this._playerSprite.setTexture(lionAteMeat);\n\n        if (this._meatTimeout) {\n            clearTimeout(this._meatTimeout);\n        }\n\n        this._meatTimeout = setTimeout(() => {\n            this.homeostasis();\n        }, 5000);\n    }\n\n    isPoweredUpByMeat() {\n        return this._ateMeat;\n    }\n}\n","import Phaser from 'phaser';\nimport banana from '../assets/banana.png';\n\n/**\n * @returns Phaser.GameObjects.GameObject\n */\nexport default class {\n\n    constructor(scene, big) {\n\n        let scale, x, y;\n\n        if (big) {\n\n            scale = Phaser.Math.FloatBetween(1, 2);\n\n            let rngBool = Phaser.Math.Between(0, 1);\n\n            x = (scene.sys.game.canvas.width / 2);\n\n            let randomX = Phaser.Math.Between(350, 850);\n            if (rngBool === 1) {\n                x -= randomX;\n            } else {\n                x += randomX;\n            }\n\n            y = -900;\n        } else {\n\n            x = Phaser.Math.Between(0, scene.sys.game.canvas.width);\n\n            scale = Phaser.Math.FloatBetween(0.15, 0.25);\n            y = -200;\n        }\n\n        const bananaSprite = scene.physics.add.sprite(x, y, banana);\n\n        bananaSprite.setBounce(0);\n        bananaSprite.setCollideWorldBounds(true);\n        bananaSprite.setGravityY(15000);\n        bananaSprite.setFlipX(!!Phaser.Math.Between(0, 1));\n        bananaSprite.setScale(scale);\n\n        bananaSprite._isBig = big;\n\n        return bananaSprite;\n    }\n\n}\n","import Phaser from 'phaser';\nimport cloud from '../assets/cloud.png';\n\n/**\n * @returns Phaser.GameObjects.GameObject\n */\nexport default class {\n\n    constructor(scene, x, y) {\n\n        const cloudSprite = scene.physics.add.sprite(x, y, cloud);\n\n        let flip = Phaser.Math.Between(0, 1);\n        let scale = Phaser.Math.FloatBetween(0.05, 0.15);\n\n        cloudSprite.setFlipX(!!flip);\n        cloudSprite.setScale(scale);\n        cloudSprite.setBounce(0);\n        cloudSprite.setCollideWorldBounds(true);\n\n        cloudSprite.body.setAllowGravity(false);\n\n        scene.tweens.add({\n            targets: cloudSprite,\n            ease: 'Quad.easeInOut',\n            duration: Phaser.Math.Between(5000, 10000),\n            repeat: -1,\n            yoyo: true,\n            x: '+=100'\n        });\n\n        return cloudSprite;\n    }\n\n}\n","export default \"/pop.mp3\";","export default \"/jump.mp3\";","export default \"/roar.mp3\";","export default \"/monkey-laugh.mp3\";","export default \"/monkey-chest.mp3\";","import Phaser from 'phaser';\n\n// Textures\nimport lion from '../assets/lion.png';\nimport banana from '../assets/banana.png';\nimport bg from '../assets/bg.jpg';\nimport meat from '../assets/meat.png';\nimport lionAteMeat from '../assets/lion_ate_meat.png';\nimport cloud from '../assets/cloud.png';\nimport monkey from '../assets/monkey.png';\n\n// Objects\nimport Player from '../Objects/Player';\nimport Banana from '../Objects/Banana';\nimport Meat from '../Objects/Meat';\nimport Cloud from '../Objects/Cloud';\nimport Monkey from '../Objects/Monkey';\n\n// Audio\nimport pop from '../assets/audio/pop.mp3';\nimport jump from '../assets/audio/jump.mp3';\nimport roar from '../assets/audio/roar.mp3';\nimport monkeyLaugh from '../assets/audio/monkey-laugh.mp3';\nimport monkeyChest from '../assets/audio/monkey-chest.mp3';\n\n// Music\nimport jungleDrumMusic from '../assets/audio/jungle-drum-music.mp3';\n\n/**\n *\n */\nexport default class MainScene extends Phaser.Scene {\n\n    /**\n     *\n     */\n    constructor() {\n        super('main');\n    }\n\n    /**\n     *\n     */\n    preload() {\n\n        this.load.image(bg, bg);\n        this.load.image(lion, lion);\n        this.load.image(banana, banana);\n        this.load.image(meat, meat);\n        this.load.image(lionAteMeat, lionAteMeat);\n        this.load.image(cloud, cloud);\n        this.load.image(monkey, monkey);\n\n        this.load.audio(pop, pop);\n        this.load.audio(jump, jump);\n        this.load.audio(roar, roar);\n        this.load.audio(jungleDrumMusic, jungleDrumMusic);\n        this.load.audio(monkeyLaugh, monkeyLaugh);\n        this.load.audio(monkeyChest, monkeyChest);\n    }\n\n    /**\n     *\n     */\n    create() {\n        this.game.sound.stopAll();\n\n        this.bg = this.add.image(0, 0, bg);\n        this.bg.setOrigin(0, 0);\n        this.bg.displayWidth = this.sys.canvas.width;\n\n        this.bg.displayHeight = this.sys.canvas.height;\n\n        this._setupClouds();\n\n        this.physics.world.setFPS(144);\n\n        // Setup score\n        this.scoreText = this.add.text(16, 16, 'Score: 0', {fontSize: '52px', fontFamily: 'Arial', fontStyle: 'bold', fill: 'white'});\n\n        this.scoreText.setShadow(5, 5, 'rgba(0,0,0,1)', 2);\n        this.scoreText.setResolution(2);\n\n        this.score = 0;\n\n        // Setup Player\n        this.player = new Player(this);\n\n        // Setup keyboard cursors\n        this.cursors = this.input.keyboard.createCursorKeys();\n\n        // Setup bananas\n        this.bananas = this.physics.add.group();\n\n        // Setup meats\n        this.meats = this.physics.add.group();\n\n        // Make bananas collide\n        this.physics.add.collider(this.bananas, this.player.getSprite(), this.bananaHit, null, this);\n\n        // Make meat collide\n        this.physics.add.collider(this.meats, this.player.getSprite(), this.powerUpMeat, null, this);\n\n        // Spawn monkey\n        this.monkey = new Monkey(this);\n\n        // Spawn bananas every 300ms\n        this.time.addEvent({\n            delay: 300,\n            callback: this._spawnBanana,\n            callbackScope: this,\n            repeat: -1\n        });\n\n        // Spawn meat every 10s\n        this.time.addEvent({\n            delay: 10000,\n            callback: this._spawnMeat,\n            callbackScope: this,\n            repeat: -1\n        });\n\n        // Show monkey every 8s\n        this.time.addEvent({\n            delay: 8000,\n            callback: this._showMonkey,\n            callbackScope: this,\n            repeat: 0\n        });\n\n        this.pop = this.sound.add(pop, {loop: false});\n        this.jump = this.sound.add(jump, {loop: false, volume: .3});\n        this.roar = this.sound.add(roar, {loop: false});\n        this.jungleDrumMusic = this.sound.add(jungleDrumMusic, {loop: true}).play();\n        this.monkeyChest = this.sound.add(monkeyChest, {loop: false, volume: 2});\n\n        this._isMobile = false;\n        this._deviceBeta = 0;\n\n        if (window.DeviceOrientationEvent && 'ontouchstart' in window) {\n\n            this._isMobile = true;\n\n            window.addEventListener('deviceorientation', (event) => {\n                this._deviceBeta = event.beta;\n            });\n\n        }\n\n    }\n\n    /**\n     *\n     * @private\n     */\n    _setupClouds() {\n\n        let center = this.sys.game.canvas.width / 2;\n\n        new Cloud(this, center - 350, 420);\n        new Cloud(this, center + 400, 520);\n    }\n\n    /**\n     *\n     * @private\n     */\n    _spawnBanana() {\n        this.score += 10;\n        this.scoreText.setText(`Score: ${this.score}`);\n        this.bananas.add(new Banana(this));\n    }\n\n    /**\n     *\n     * @private\n     */\n    _spawnBigBanana() {\n        this.bananas.add(new Banana(this, true));\n    }\n\n    /**\n     *\n     * @private\n     */\n    _spawnMeat() {\n        this.meats.add(new Meat(this));\n    }\n\n    /**\n     *\n     * @private\n     */\n    _showMonkey() {\n\n        this.monkey.show();\n\n        setTimeout(() => {\n            this._spawnBigBanana();\n        }, 1500);\n\n        // Show monkey every 8s\n        this.time.addEvent({\n            delay: Phaser.Math.Between(5000, 10000),\n            callback: this._showMonkey,\n            callbackScope: this,\n            repeat: 0\n        });\n    }\n\n    /**\n     *\n     * @param time\n     * @param delta\n     */\n    update(time, delta) {\n\n        if (this._isMobile) {\n\n            if (this._deviceBeta < 0) {\n                this.player.moveLeft();\n            } else {\n                this.player.moveRight();\n            }\n\n        } else {\n\n            if (this.cursors.shift.isDown) {\n                this.player.setSpeedSprint();\n            } else {\n                this.player.setSpeedWalk();\n            }\n\n            if (this.cursors.left.isDown) {\n                this.player.moveLeft();\n            } else if (this.cursors.right.isDown) {\n                this.player.moveRight();\n            } else {\n                this.player.stationary();\n            }\n\n            if (this.cursors.up.isDown && this.player.isNotJumpingOrFalling()) {\n                this.player.jump();\n            }\n        }\n    }\n\n    /**\n     *\n     * @param player\n     * @param banana\n     */\n    bananaHit(player, banana) {\n\n        if (!this.player.isPoweredUpByMeat()) {\n            this.scene.start('score', {score: this.score});\n            return;\n        }\n\n        this.score += banana._isBig ? 1000 : 100;\n\n        banana.destroy();\n    }\n\n    /**\n     *\n     * @param player\n     * @param meat\n     */\n    powerUpMeat(player, meat) {\n        this.player.powerUpMeat();\n        meat.destroy();\n    }\n\n}\n","import monkey from '../assets/monkey.png';\n\n/**\n * @returns Phaser.GameObjects.GameObject\n */\nexport default class {\n\n    constructor(scene) {\n\n        this.scene = scene;\n\n        this._monkeySprite = this.scene.physics.add.sprite(-500, this.scene.sys.game.canvas.height, monkey);\n        this._monkeySprite.setOrigin(0, 1);\n        this._monkeySprite.setCollideWorldBounds(false);\n\n        this._monkeySprite.body.setAllowGravity(false);\n\n        return this;\n    }\n\n    show() {\n\n        this.scene.monkeyChest.play();\n\n        this.scene.tweens.add({\n            targets: this._monkeySprite,\n            ease: 'Linear',\n            duration: 600,\n            repeat: 0,\n            yoyo: false,\n            x: '+=500'\n        });\n\n        setTimeout(() => {\n\n            this.scene.tweens.add({\n                targets: this._monkeySprite,\n                ease: 'Linear',\n                duration: 600,\n                repeat: 0,\n                yoyo: false,\n                x: '-=500'\n            });\n\n        }, 3000);\n    }\n\n}\n","import Phaser from 'phaser';\nimport meat from '../assets/meat.png';\n\n/**\n * @returns Phaser.GameObjects.GameObject\n */\nexport default class {\n\n    constructor(scene) {\n\n        const x = Phaser.Math.Between(0, scene.sys.game.canvas.width);\n        const meatSprite = scene.physics.add.sprite(x, -200, meat);\n\n        let scale = Phaser.Math.FloatBetween(0.5, 0.8);\n        let flip = Phaser.Math.Between(0, 1);\n\n        meatSprite.setFlipX(!!flip);\n        meatSprite.setScale(scale);\n        meatSprite.setBounce(0);\n        meatSprite.setCollideWorldBounds(true);\n        meatSprite.setGravityY(35000);\n\n        return meatSprite;\n    }\n\n}\n","export default \"/gameover.mp3\";","import Phaser from 'phaser';\n\nimport bg from '../assets/bg.jpg';\nimport gameover from '../assets/audio/gameover.mp3';\nimport monkeyLaugh from '../assets/audio/monkey-laugh.mp3';\n\nexport default class ScoreScene extends Phaser.Scene {\n\n    constructor() {\n        super('score');\n    }\n\n    preload() {\n        this.load.image(bg, bg);\n        this.load.audio(gameover, gameover);\n    }\n\n    init(data) {\n        this.score = data.score;\n    }\n\n    create() {\n\n        this.bg = this.add.image(0, 0, bg);\n        this.bg.setOrigin(0, 0);\n        this.bg.displayWidth = this.sys.canvas.width;\n        this.bg.displayHeight = this.sys.canvas.height;\n\n        let scoreText = this.add.text(0, 0, `Final score: ${this.score}`, {fontSize: '92px', fontFamily: 'Arial', fontStyle: 'bold', fill: 'white'});\n        scoreText.setShadow(3, 3, 'rgba(0,0,0,0.8)', 2);\n\n        scoreText.setPosition(this.sys.canvas.width / 2, this.sys.canvas.height / 2);\n        scoreText.setOrigin(0.5);\n\n        scoreText.setResolution(2);\n\n        scoreText.setShadow(5, 5, 'rgba(0,0,0,1)', 2);\n        scoreText.setResolution(2);\n\n        let continueText = this.add.text(0, 0, `Press Space to restart`, {fontSize: '42px', fontFamily: 'Arial', fontStyle: 'bold', fill: 'white'});\n        continueText.setShadow(3, 3, 'rgba(0,0,0,1)', 2);\n        continueText.setResolution(2);\n\n        continueText.setPosition(this.sys.canvas.width / 2, (this.sys.canvas.height / 2) + 70);\n        continueText.setOrigin(0.5);\n\n        this.input.keyboard.on('keydown-SPACE', function() {\n            this.scene.start('main');\n        }, this);\n\n        this.input.on('pointerup', function() {\n            this.scene.start('main');\n        }, this);\n        \n        this.game.sound.stopAll();\n\n        let gameoverSound = this.sound.add(gameover, {loop: false});\n        let monkeyLaughSound = this.sound.add(monkeyLaugh, {loop: false});\n        gameoverSound.play();\n        monkeyLaughSound.play();\n\n    }\n\n}\n","import '../frontend/src/style/index.scss';\n\nimport Phaser from 'phaser';\n\nimport LaunchScene from './Scenes/LaunchScene';\nimport MainScene from './Scenes/MainScene';\nimport ScoreScene from './Scenes/ScoreScene';\n\nconst config = {\n\n    type: Phaser.AUTO,\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: {y: 2000}\n        }\n    },\n    scale: {\n        parent: 'lion',\n        mode: Phaser.Scale.FIT,\n        autoCenter: Phaser.Scale.CENTER_BOTH,\n        width: 2560,\n        height: 1440\n    },\n    scene: [LaunchScene, MainScene, ScoreScene]\n};\n\nexport default new Phaser.Game(config);\n"],"sourceRoot":""}